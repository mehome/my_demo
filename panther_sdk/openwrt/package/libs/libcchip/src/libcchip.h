#ifndef LIBCCHIP_H_
#define LIBCCHIP_H_ 1
#include "function/common/misc.h"
#include "function/log/slog.h"
#include "interface/system_cfg/system_cfg.h"
//#include "interface/PlayerManager/PlayerManager.h"
#include "interface/alarm_op/alarm_create.h"
#include "interface/alarm_op/startingup_play.h"
#include "interface/testmode/testmode.h"
#include "interface/micarray_op/micarray.h"


/**************************** START LZ *****************************/

/******************************************
 ** 函数名: log_init							测试OK
 ** 功  能: log 打印控制初始化
 ** 参  数: char *ctl_str:控制字符串 例如："l=11101"
			如果你的进程中没有调用log_init进行初始化,或者ctl_str为:NULL,那么所有库函数的
			log打印控制将等效为：log_init("l=11100"); 即：只打印raw、err、war或者raw_nl、
			err_nl、war_nl级别的log,其中带后缀(_nl)的宏为与其对应的不带后缀的宏的无锁操作。
			在ctl_str中"l="后的字段可以控制最多五个级别的log,其中每一字节可对应开关以下两
			组log宏的每一个宏打印log的开关：
				raw(x...)		or    	raw_nl(x...)
				err(x...)             	err_nl(x...)
				war(x...)             	war_nl(x...)
				inf(x...)             	inf_nl(x...)
				dbg(x...)             	dbg_nl(x...)
				
 ** 返回值: 成功返回0，失败返回小于0的值
 ** 说	明：如果您的接口函数将由cgi程序调用，您可以使用上面的每个宏功能来调试您的程序，但是所
			有不相关的日志必须在发布时全部关闭，否则，它将影响cgi程序的正常功能。更多更详细的
			log使用说明见本库的说明文档。
 ******************************************/
int log_init(const char *ctl_str);

/**************************** END LZ *****************************/

/******************************************
 ** 函数名: get_aplist							
 ** 功  能: 获取当前环境SSID信息
 ** 参  数: apInfList **pAplist, SSID信息以结构体数组的形式表示，指向获取到的wifi SSID信息，该指针用完后需要free(*pAplist)
	 typedef struct apInfList{
		char SSID[16];	//Wifi可见名称
		char bssid[18];	//Mac地址
		char rssi[4];		//信号强度
		char channel;	//Wifi信道
		char auth;		//是否加密
		char encry;		//加密类型
		char extch;
	}apInfList;
 ** 返回值: 成功返回获取到的AP个数，失败返回-2
 ******************************************/ 
int get_aplist(apInfList **pAplist);


/******************************************
 ** 函数名: connect_wifi						
 ** 功  能: 连接相应的wifi
 ** 参  数: char* ssid:ssid字符串
 			char* psw: 密码字符串
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int connect_wifi(char* ssid,char* psw);

/******************************************
 ** 函数名: disconnect_wifi					
 ** 功  能: 断开网络连接
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int disconnect_wifi(void);

/******************************************
 ** 函数名: set_device_ssid					
 ** 功  能: 修改本模块的AP模式下的SSID名称
 ** 参  数: char *ssid:目的SSID名称
 ** 返回值: 成功返回0，失败返回-1和-2
 ******************************************/ 
int set_device_ssid(char *ssid);

/******************************************
 ** 函数名: set_device_pwd						
 ** 功  能: 修改本模块的AP模式下的wifi密码
 ** 参  数: char *pwd:密码字符串
 ** 返回值: 成功返回0，失败返回-1和-2
 ******************************************/ 
int set_device_pwd(char *pwd);

/************************* LIAOYC START **************************/
/******************************************
 ** 函数名: dot_normal_record
 ** 功  能: 开始正常模式录音
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int dot_normal_record(int value);

/******************************************
 ** 函数名: dot_normal_record_web_path
 ** 功  能: 获取正常模式录音文件路径
 ** 参  数: 无
 ** 返回值: 返回正常模式录音文件在web server的路径
 ******************************************/ 
char* dot_normal_record_web_path(void);

/******************************************
 ** 函数名: dot_mic_record
 ** 功  能: 开始麦克模式录音
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int dot_mic_record(int value);

/******************************************
 ** 函数名: dot_stop_record
 ** 功  能: 停止麦克模式录音
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int dot_stop_record();

/******************************************
 ** 函数名: dot_mic_record_web_path
 ** 功  能: 获取麦克模式录音文件路径
 ** 参  数: 无
 ** 返回值: 返回麦克模式录音文件在web server的路径
 ******************************************/ 
char* dot_mic_record_web_path(void);

/******************************************
 ** 函数名: dot_ref_record
 ** 功  能: 开始参考模式录音
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int dot_ref_record(int value);

/******************************************
 ** 函数名: dot_ref_record_web_path
 ** 功  能: 开始参考模式录音
 ** 参  数: 无
 ** 返回值: 返回参考模式录音文件在web server的路径
 ******************************************/ 
char* dot_ref_record_web_path(void);

/******************************************
 ** 函数名: bt_search
 ** 功  能: 开始搜索周边蓝牙设备
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int bt_search(void);

/******************************************
 ** 函数名: bt_list
 ** 功  能: 获取蓝牙设备信息列表
 ** 参  数: char **bt_list, 指向获取到的蓝牙设备信息列表,该指针用完后需要free
 **         bt_list字符串中每个条目格式为XX+112233445566,XX为序号(00 01 02..),后面是蓝牙地址,
 **         序号第1位为1表示该条目对应的蓝牙设备为当前连接的设备
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int bt_list(char **bt_list);

/******************************************
 ** 函数名: bt_connect
 ** 功  能: 连接蓝牙设备
 ** 参  数: char *bt_addr, 需要连接的蓝牙设备地址
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int bt_connect(char *bt_addr);

/******************************************
 ** 函数名: bt_disconnect
 ** 功  能: 断开蓝牙设备
 ** 参  数: 无
 ** 返回值: 成功返回0,失败返回-1
 ******************************************/ 
int bt_disconnect();

/******************************************
** 函数名: get_wakeup_times
** 功  能: 获取远场唤醒次数
** 参  数: 无
** 返回值: 返回远场唤醒次数
 ******************************************/ 
int get_wakeup_times(void);

/******************************************
** 函数名: get_battery_level
** 功  能: 获取电池电量
** 参  数: 无
** 返回值: 返回值0-10对应电量0%-100%
 ******************************************/ 
int get_battery_level(void);
/************************* LIAOYC END **************************/

/*************************luoyj start **************************/
/******************************************
 ** 函数名: conexant_update
 ** 功  能: 科胜讯升级
 ** 参  数: char *sfs char *bin，sfs和bin文件需要web推送到设备然后传入固件路径
 ** 返回值: 成功返回0，失败返回-1
 ******************************************/ 
int conexant_update(char *sfs,char *bin);

/******************************************
 ** 函数名: get_conexant_version
 ** 功  能: 获取科胜讯版本号
 ** 参  数: 无
 ** 返回值: 成功返回字符串版本号，失败返回NULL
 ******************************************/ 

char *get_conexant_version(void);

/******************************************
 ** 函数名: xzxhtml_btup
 ** 功  能: 网页升级蓝牙
 ** 参  数: char *pPath 蓝牙固件先由web推送到设备，然后传入固件路径到函数
 ** 返回值: 成功0，失败返回-1
 ******************************************/ 
int xzxhtml_btup(char *pPath);

/******************************************
 ** 函数名: xzxhtml_wifiup
 ** 功  能: 网页升级wifi
 ** 参  数: char *pPath wifi固件先由web推送到设备，然后传入固件路径到函数
 ** 返回值: 成功0，失败返回-1
 ******************************************/

int xzxhtml_wifiup(char *pPath);

/******************************************
 ** 函数名: app_update_noparmeter
 ** 功  能: app升级接口函数
 ** 参  数: *pPath
 ** 返回值: 成功0，非0失败
 ******************************************/

int app_update_noparmeter(char *pPath);

/******************************************
 ** 函数名: set_wifi_bt_update_flage
 ** 功  能: 设置升级时状态标志
 ** 参  数: 无
 ** 返回值: 成功0，非0失败
 ******************************************/
int set_wifi_bt_update_flage(int status);

/******************************************
 ** 函数名: get_wifi_bt_update_flage
 ** 功  能: 获取升级时状态标志
 ** 参  数: 无
 ** 返回值:
 0：wifi和蓝牙都是最新，不需要升级
 1：wifi不需要升级，蓝牙需要升级
 2：wifi需要升级，蓝牙不需要升级
 3：wifi 和蓝牙都需要升级
 4：wifi正在升级中
 5：蓝牙正在升级中
 6：wifi固件下载中
 7：蓝牙固件下载中
 8：网页升级 wifi 中
 9：网页升级蓝牙中
 ******************************************/

int get_wifi_bt_update_flage(void);

/******************************************
 ** 函数名: get_wifi_bt_burn_progress
 ** 功  能: 获取升级时烧录进度
 ** 参  数: 无
 ** 返回值: 成功返回进度（取值范围：0~100 最多 6 字节），失败返回-1
 ******************************************/
 
int get_wifi_bt_burn_progress(void);

/******************************************
 ** 函数名: get_wifi_bt_download_progress
 ** 功  能: 获取升级时下载进度
 ** 参  数: 无
 ** 返回值: 成功返回进度（取值范围：0~100 最多 6 字节），失败返回-1
 ******************************************/
int get_wifi_bt_download_progress(void);

/******************************************
 ** 函数名: is_charge_plug
 ** 功  能: 判断是否插入电源
 ** 参  数: 无
 ** 返回值: 插入电源返回1，未插入返回0，读取失败返回-1
 ******************************************/
int is_charge_plug(void);

/******************************************
 ** 函数名: search_connect_router_ssid(void)
 ** 功  能: 查询当前连接的路由器
 ** 参  数: 无
 ** 返回值: 成功返回连接路由的ssid，失败返回NULL
 ******************************************/
char * search_connect_router_ssid(void);

/******************************************
 ** 函数名: get_device_info(DEVICEINFO *aplist )
 ** 功  能: 获取设备信息，信息保存在结构体中
 ** 参  数: aplist
 ** 返回值: 0：成功，非0：失败
******************************************/

int get_device_info(DEVICEINFO *aplist);

/******************add by luoyj start******************/

/********************* YIN *******************/
/******************************************
** 3.2.11. 静音设置 				   
** 函数名: set_player_cmd_mute
** 功   能: 设置播放器静音或解除播放器静音
** 参   数: int mute:1 静音，0 非静音
** 返回值: 成功返回0，失败返回-1或-2
******************************************/ 
int set_player_cmd_mute(int mute);

/******************************************
** 3.2.11. 获取静音状态 				   
** 函数名: get_player_cmd_mute
** 功   能: 设置播放器静音或解除播放器静音
** 参   数: NULL
** 返回值: 成功返回1 静音，0 非静音
******************************************/ 
int get_player_cmd_mute();


/******************************************
** 3.2.14. 设置均衡器模式 				   
** 函数名: set_equalizer_mode
** 功   能: 设置均衡器模式
** 参   数: int mode:0  关闭均衡
					1  Classic 模式
					2  Popular 模式
					3  Jazzy 模式
					4  Vocal 模式
** 返回值: 成功返回0
******************************************/ 
int set_equalizer_mode(int mode);

/******************************************
** 3.2.15. 查询均衡器 				   
** 函数名: get_equalizer_mode
** 功   能: 查询均衡器模式
** 参   数: 无
** 返回值: 成功返回均衡器模式：0，1，2，3，4
******************************************/ 
int get_equalizer_mode(void);

/******************************************
** 3.2.16. 声道设置 				   
** 函数名: set_voice_channel
** 功   能: 声道设置
** 参   数: int flag:0:正常双声道
					1:左声道
					2:右声道
** 返回值: 成功返回0
******************************************/ 
int set_voice_channel(int flag);

/******************************************
** 3.2.17. 获取声道设置 				   
** 函数名: get_voice_channel
** 功   能: 声道设置
** 参   数: NULL
** 返回值: 0:正常双声道
		   1:左声道
		   2:右声道
******************************************/ 
int get_voice_channel();


/******************************************
** 3.8.1.  语种选择 				   
** 函数名: set_language
** 功   能: 设置提示语音语言
** 参   数: int language:0：为语音提示禁用
						1：为汉语
						2：为英语
						3：法语
						4：西班牙语
** 返回值: 成功返回0，失败返回-1或-2
******************************************/ 
int set_language(int language);

/******************************************
 ** 3.10.1. 设置录音时间						
 ** 函数名: set_record_time
 ** 功  能: 录制指定时间长度的音频，最长12s
 ** 参  数: int value:录音时间
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int set_record_time(int value);

/******************************************
 ** 3.10.2. 播放录音文件						
 ** 函数名: play_record_audio
 ** 功  能: 播放录音文件
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int play_record_audio(void);

/******************************************
 ** 3.10.3. 临时播放录音						
 ** 函数名: play_url_audio
 ** 功  能: 临时播放录音文件，播放完之后恢复先前播放,URL 为录音文件的访问地址，录音文件格式为 mp3
 ** 参  数: int value:录音时间
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int play_url_audio(const char *url);

/******************************************
 ** 3.10.4. 开始录音						
 ** 函数名: start_record
 ** 功  能: 开始录音,默认最长录音12s
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int start_record(void);

/******************************************
 ** 3.10.5. 停止录音					
 ** 函数名: stop_record
 ** 功  能: 立即停止录音
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int stop_record(void);

/******************************************
 ** 3.10.6. 定长录音					
 ** 函数名: start_fixed_record
 ** 功  能: 录制5s音频
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int start_fixed_record(void);

/******************************************
 ** 3.10.7. 获取录音文件 URL				
 ** 函数名: get_record_file_URL
 ** 功  能: 获取录音文件的 URL，可用此 URL 进行下载
 ** 参  数: 无
 ** 返回值: 成功返回录音文件的 URL，失败返回NULL
******************************************/ 
const char *get_record_file_URL(void);

/******************************************
 ** 3.10.8. 语音活动检测						
 ** 函数名: voice_activity_detection
 ** 功  能: 语音活动检测
 ** 参  数: int value:取值范围为 500000 到 2000000，值越大相应的检测是否有语音活动的范围越大
 			char *pcardname：要测试的声卡名称，支持 default、plughw:1 和 plughw:0
** 返回值: 成功返回0，失败返回-2或-1
******************************************/ 
int voice_activity_detection(int value, char *pcardname);
	
/******************************************
** 3.10.9. 左右声道录音对比 				   
** 函数名: voice_channel_compare
** 功   能: 在录音成功之后，可调用该接口对比两个 Mic 的录音效果会否接近
** 参   数: char *filename:双声道录音文件绝对路径
		   float *l_pro:左声道偏da比例
		   float *r_pro:右声道偏da比例
** 返回值: 无
******************************************/ 
void voice_channel_compare(char *filename, float *l_pro, float *r_pro);


/**************************** END YIN *****************************/

/******************************************
 ** 2.14.1. 						
 ** 函数名: interaction_log_capture_enable
 ** 功  能: 云端交互日志捕捉使能
 ** 参  数: 无
 ** 返回值: 成功返回日志文件路径，不存在失败的情况
******************************************/ 
char* interaction_log_capture_enable(void);

/******************************************
 ** 2.14.2. 						
 ** 函数名: interaction_log_capture_disable
 ** 功  能: 云端交互日志捕捉禁止
 ** 参  数: 无
 ** 返回值: 成功返回0，失败返回-1
******************************************/ 
int interaction_log_capture_disable(void);

int get_micarray_info(micarray_Info **pMicarray_info);

//开始mic阵录音
int micarray_record(int value);

//获取mic阵降噪录音文件路径
char* micarray_normal_record_path();

//获取mic阵麦克录音文件路径
char* micarray_mic_record_path();

//获取mic阵参考信号录音文件路径 
char* micarray_ref_record_path();

//停止mic阵录音
int micarray_stop_record();


#endif
