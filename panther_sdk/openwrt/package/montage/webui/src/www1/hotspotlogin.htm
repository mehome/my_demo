<!--ifdef CONFIG_HOTSPOT-->
<!DOCTYPE HTML>
<HTML>

<head>
 <title>Panther</title>
 <META http-equiv=Content-Type content='text/html; charset=utf-8'>
 <meta http-equiv="Cache-control" content="no-cache">
 <meta http-equiv="Pragma" content="no-cache">
 <SCRIPT>
var querystr = window.location.search.substr(1);
var blur = 0;
var starttime = new Date();
var startclock = starttime.getTime();
var mytimeleft = 0;
// Default: It was not a form request
var result = 0;
var res, uamip, uamport, uid, nasid, mac, button;
var userurl, redirurl, user, pass;
var challenge, timeleft;
var reply, userurldecode = null,
	redirurldecode = null;
var timer = '';

function getElbyID(id) {
	return document.getElementById(id);
}

function rule2var(str, name) {
	var it = str.split('&');
	var re = new RegExp(name + "=(.*)");
	for (var i = 0; i < it.length; i++) {
		if (re.test(it[i])) {
			var v1 = (it[i]).split('=');
			if (v1[0] == name)
				return RegExp.$1;
		}
	}
	return '';
}

var uamsecret = '';
//var userpassword=1;

//get respective variables
res = rule2var(querystr, 'res');
button = rule2var(querystr, 'button');
user = rule2var(querystr, 'user');
pass = rule2var(querystr, 'pass');
uamip = rule2var(querystr, 'uamip');
uamport = rule2var(querystr, 'uamport');
challenge = rule2var(querystr, 'challenge');
uid = rule2var(querystr, 'uid');
nasid = rule2var(querystr, 'nasid');
userurl = rule2var(querystr, 'userurl');
redirurl = rule2var(querystr, 'redirurl');
reply = rule2var(querystr, 'reply');
timeleft = rule2var(querystr, 'timeleft');
mac = rule2var(querystr, 'mac');
if (reply) reply = decodeURI(reply);
if (userurl) userurldecode = decodeURI(userurl);
if (redirurl) redirurldecode = decodeURI(redirurl);

function init() {
	var f = document.form1;

	if (result == 2) {
		getElbyID("t1").innerHTML = "ChilliSpot Login Failed";
		if (reply) getElbyID("t2").innerHTML = reply;
	}
	if (result == 2 || result == 5) {
		f.challenge.value = challenge;
		f.uamip.value = uamip;
		f.uamport.value = uamport;
		f.userurl.value = userurldecode;
	}
	if (result == 1) {
		getElbyID("t1").innerHTML = "Logged in to ChilliSpot";
		if (reply) getElbyID("t2").innerHTML = reply;
		getElbyID("t3").innerHTML = "<a href=\"http://" + uamip + ":" + uamport + "/logoff\">Logout<" + "/a>";
	}
	if ((result == 4) || (result == 12)) {
		getElbyID("t1").innerHTML = "Logged in to ChilliSpot";
		getElbyID("t2").innerHTML = "";
		getElbyID("t3").innerHTML = "<a href=\"http://" + uamip + ":" + uamport + "/logoff\">Logout<" + "/a>";
	}
	if (result == 11) {
		getElbyID("t1").innerHTML = "Logging in to ChilliSpot";
		getElbyID("t2").innerHTML = "Please wait......";
		getElbyID("t3").innerHTML = "";
		Send_Logon_Req();
	}
	if ((result == 3) || (result == 13)) {
		getElbyID("t1").innerHTML = "Logged out from ChilliSpot";
		getElbyID("t3").innerHTML = "<input type=button name=\"close\" value=\"Close\" onClick=\"javascript:self.close()\">";
	}
	//Otherwise it was not a form request, send out an error message
	if (result == 0) {
		if (button != "Login") {
			getElbyID("t1").innerHTML = "ChilliSpot Login Failed";
			getElbyID("t2").innerHTML = "Login must be performed through ChilliSpot daemon.";
			getElbyID("t3").innerHTML = "";
		} else {
			getElbyID("t1").innerHTML = "ChilliSpot is processing authentication";
			getElbyID("t2").innerHTML = "Please wait......";
			getElbyID("t3").innerHTML = "";
		}
	}
	doOnLoad(result, 'hotspotlogin.htm?res=popup2&uamip=' + uamip + '&uamport=' + uamport + '&userurl=' + userurl + '&redirurl=' + redirurl + '&timeleft=' + timeleft, userurldecode, redirurldecode, timeleft);
}

//Status
if (res == "success") result = 1; //login successful
if (res == "failed") result = 2; //login failed
if (res == "logoff") result = 3; //logout successful
if (res == "already") result = 4; //try to login while already logged in
if (res == "notyet") result = 5; //not logged in yet
if (res == "smartclient") result = 6; //login from smart client
if (res == "popup1") result = 11; //request a logging in pop up window
if (res == "popup2") result = 12; //request a success pop up window
if (res == "popup3") result = 13; //request a logout pop up window

function doTime() {
	window.setTimeout("doTime()", 1000);
	t = new Date();
	time = Math.round((t.getTime() - starttime.getTime()) / 1000);
	if (mytimeleft) {
		time = mytimeleft - time;
		if (time <= 0) {
			window.location = "hotspotlogin.htm?res=popup3&uamip=" + uamip + "&uamport=" + uamport;
		}
	}
	if (time < 0) time = 0;
	hours = (time - (time % 3600)) / 3600;
	time = time - (hours * 3600);
	mins = (time - (time % 60)) / 60;
	secs = time - (mins * 60);
	if (hours < 10) hours = "0" + hours;
	if (mins < 10) mins = "0" + mins;
	if (secs < 10) secs = "0" + secs;
	title = "Online time: " + hours + ":" + mins + ":" + secs;
	if (mytimeleft) {
		title = "Remaining time: " + hours + ":" + mins + ":" + secs;
	}
	if (document.all || getById) {
		document.title = title;
	} else {
		self.status = title;
	}
}

function popUp(URL) {
	if (self.name != "chillispot_popup") {
		chillispot_popup = window.open(URL, 'chillispot_popup', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=375');
	}
}

function Auth_Successful(sec) {
	opener.getElbyID("t1").innerHTML = "Authentication is Successful !";
	opener.getElbyID("t2").innerHTML = "Welcome! " + uid + "<br><br>";
	opener.getElbyID("t3").innerHTML = "Please wait <font color=red><b>" + sec + "<" + "/b><" + "/font> seconds to continue to your previous request page ...";
	sec--;
	if (sec == 0) {
		if (redirurl) {
			opener.location = redirurldecode;
		} else if (userurl) {
			opener.location = userurldecode;
		} else if (opener.home) {
			opener.home();
		} else {
			opener.location = "about:blank";
		}
		clearTimeout(timer);
	} else
		timer = setTimeout("Auth_Successful(" + sec + ")", 1000);
}

function Open_Previous_Page() {
	if (redirurl) {
		window.location = redirurldecode;
	} else if (userurl) {
		window.location = userurldecode;
	} else if (window.home) {
		window.home();
	} else {
		window.location = "about:blank";
	}
}

function Auth_Failed() {
	opener.getElbyID("t1").innerHTML = "Authentication is failed !";
	opener.getElbyID("t2").innerHTML = "";
	//opener.getElbyID("t3").innerHTML="<a href=\"http://"+uamip+":"+uamport+"/prelogin\">Login again<"+"/a>";
	opener.getElbyID("t3").innerHTML = "<input type=button name=\"Try_Again\" value=\"Try again\" onClick=Open_Previous_Page()>";
}

function doOnLoad(result, URL, userurl, redirurl, timeleft) {
	if (timeleft) {
		mytimeleft = timeleft;
	}
	/*if ((result == 1) && (self.name == "chillispot_popup"))
  {
    doTime();
  }*/
	if ((result == 1) && (self.name != "chillispot_popup")) {
		chillispot_popup = window.open(URL, 'chillispot_popup', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=375');
	}
	if (result == 5) {
		document.form1.user.focus();
	}
	if (result == 2) {
		Auth_Failed();
		self.close();
	}
	if ((result == 2) && (self.name != "chillispot_popup")) {
		chillispot_popup = window.open('', 'chillispot_popup', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=400,height=200');
		chillispot_popup.close();
	}
	if (((result == 1) || (result == 12)) && (self.name == "chillispot_popup")) {
		doTime();
		Auth_Successful(5);
		self.focus();
		blur = 0;
	}
	if ((result == 13) && (self.name == "chillispot_popup")) {
		self.focus();
		blur = 1;
	}
}

function doOnBlur() {
	if ((result == 12) && (self.name == "chillispot_popup")) {
		if (blur == 0) {
			blur = 1;
			self.focus();
		}
	}
}

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 1; /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad = ""; /* base-64 pad character. "=" for strict RFC compliance   */
var chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode      */

/*
 * Convert an array of little-endian words to a hex string.
 */
function binl2hex(binarray) {
	var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	var str = "";
	for (var i = 0; i < binarray.length * 4; i++) {
		str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) +
			hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
	}
	return str;
}

function hex2bin(hex) {
	var bytes = [];
	var str;
	for (var i = 0; i < hex.length; i += 2) {
		bytes.push(parseInt(hex.substr(i, 2), 16));
	}
	str = String.fromCharCode.apply(String, bytes);
	return str;
}

/*
 * Convert a string to an array of little-endian words
 * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
 */
function str2binl(str) {
	var bin = Array();
	var mask = (1 << chrsz) - 1;
	for (var i = 0; i < str.length * chrsz; i += chrsz)
		bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
	return bin;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y) {
	var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt) {
	return (num << cnt) | (num >>> (32 - cnt));
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len) {
	/* append padding */
	x[len >> 5] |= 0x80 << ((len) % 32);
	x[(((len + 64) >>> 9) << 4) + 14] = len;

	var a = 1732584193;
	var b = -271733879;
	var c = -1732584194;
	var d = 271733878;

	for (var i = 0; i < x.length; i += 16) {
		var olda = a;
		var oldb = b;
		var oldc = c;
		var oldd = d;

		a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
		d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
		c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
		b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
		a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
		d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
		c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
		b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
		a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
		d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
		c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
		b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
		a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
		d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
		c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
		b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

		a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
		d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
		c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
		b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
		a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
		d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
		c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
		b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
		a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
		d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
		c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
		b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
		a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
		d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
		c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
		b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

		a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
		d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
		c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
		b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
		a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
		d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
		c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
		b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
		a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
		d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
		c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
		b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
		a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
		d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
		c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
		b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

		a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
		d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
		c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
		b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
		a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
		d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
		c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
		b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
		a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
		d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
		c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
		b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
		a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
		d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
		c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
		b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

		a = safe_add(a, olda);
		b = safe_add(b, oldb);
		c = safe_add(c, oldc);
		d = safe_add(d, oldd);
	}
	return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t) {
	return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
	return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
	return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
	return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
	return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

function Send_Logon_Req() {
	var f = document.form1;
	var hexchal, response, pappassword, response;
	var uamuri, encode_str, m5, input;

	if (button != "Login") {
		user = f.user.value;
		pass = f.pass.value;
	}

	hexchal = hex2bin(challenge);
	if (uamsecret) {
		input = hexchal + uamsecret;
		m5 = core_md5(str2binl(input), input.length * 8);
		for (var i = 0; i < m5.length * 4; i++) {
			var c = 0;
			if (i < pass.length) {
				c = pass.charCodeAt(i);
				m5[i >> 2] = m5[i >> 2] ^ (c << ((i % 4) * 8));
			}
		}
		pappassword = binl2hex(m5);
		encode_str = "password=" + pappassword;
	} else {
		input = "\0" + pass + hexchal;
		m5 = core_md5(str2binl(input), input.length * 8);
		response = binl2hex(m5);
		encode_str = "response=" + response;
	}
	uamuri = 'http://' + uamip + ':' + uamport + '/logon?username=' + user + '&' + encode_str + '&userurl=' + userurl;
	window.location = uamuri;
}

function Apply() {
	var f = document.form1;
	popUp('hotspotlogin.htm?res=popup1&uamip=' + uamip + '&uamport=' + uamport + '&challenge=' + challenge + '&user=' + f.user.value + '&pass=' + f.pass.value + '&button=' + f.button.value + '&userurl=' + userurl);
}
 </script>
</head>

<body onLoad="javascript:init()" onBlur="javascript:doOnBlur()" bgColor='#c0d8f4'>
 <form name="form1" method="get" action='hotspotlogin.htm'>
  <h1 style="text-align:center;"><span id="t1">ChilliSpot Login</span></h1>
  <center><span id="t2"></span>
   <br>
   <br>
  </center>
  <center>
   <div id="t3">
    <input type="hidden" name="challenge">
    <input type="hidden" name="uamip">
    <input type="hidden" name="uamport">
    <input type="hidden" name="userurl">
    <table border="0" cellpadding="5" cellspacing="0" style="width: 217px;">
     <tbody>
      <tr>
       <td align="right">Username:</td>
       <td>
        <input STYLE="font-family: Arial" type="text" name="user" id="user" size="20" maxlength="128">
       </td>
      </tr>
      <tr>
       <td align="right">Password:</td>
       <td>
        <input STYLE="font-family: Arial" type="password" name="pass" id="pass" size="20" maxlength="128">
       </td>
      </tr>
      <tr>
       <td align="center" colspan="2" height="23">
        <input type="submit" name="button" id="button" value="Login" onClick="javascript:Apply();">
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </center>
 </form>
</body>

</html>
<!--endif-->
