<!DOCTYPE HTML>
<HTML>

<head>
 <title>Panther</title>
 <META http-equiv=Content-Type content='text/html; charset=utf-8'>
 <SCRIPT src=common.js></SCRIPT>
 <SCRIPT src=wdk.js></SCRIPT>
 <SCRIPT src=product.js></SCRIPT>
 <SCRIPT>
wdk.cdbLoad([
	'$wl_bss_num', '$wl_bss_enable1-' + SSID_MAX_NUM,
	'$wl_bss_sec_type1-' + SSID_MAX_NUM, '$wl_bss_wpa_psk1-' + SSID_MAX_NUM,
	'$wl_bss_cipher1-' + SSID_MAX_NUM, '$wl_bss_wpa_rekey1-' + SSID_MAX_NUM,
]);
wdk.cdbLoad([
	'$wl_bss_wep_index1-' + SSID_MAX_NUM,
	'$wl_bss_key_mgt1-' + SSID_MAX_NUM, '$wl_bss_radius_svr1-' + SSID_MAX_NUM,
	'$wl_bss_radius_svr_port1-' + SSID_MAX_NUM, '$wl_bss_radius_svr_key1-' + SSID_MAX_NUM,
]);
wdk.cdbLoad([
	'$wl_bss_wps_state1-' + SSID_MAX_NUM,
	'$wl_bss_wep_1key1-' + SSID_MAX_NUM, '$wl_bss_wep_2key1-' + SSID_MAX_NUM,
	'$wl_bss_wep_3key1-' + SSID_MAX_NUM, '$wl_bss_wep_4key1-' + SSID_MAX_NUM,
]);

var SSID_NUM = wdk.cdbVal('$wl_bss_num');

//CIPHER MODE
var WAPI_CIPHER_MODE = 16;
var AES_CIPHER_MODE = 8;
var TKIP_CIPHER_MODE = 4;
var WEP104_CIPHER_MODE = 2;
var WEP40_CIPHER_MODE = 1;
var NONE_CIPHER_MODE = 0;

//SECURITY MODE
var DISABLE_SEC_MODE = 0;
var OPEN_SEC_MODE = 1;
var SHARED_SEC_MODE = 2;
var WEP_SEC_MODE = 4;
var WPA_SEC_MODE = 8;
var WPA2_SEC_MODE = 16;
var WPA_WPA2_SEC_MODE = 24;
var WPS_SEC_MODE = 32;
var WAPI_SEC_MODE = 128;

//8021x
var WPA_MULTIPLE = 32;
var WPA_WITH_EAP_MODE = WPA_SEC_MODE * WPA_MULTIPLE;
var WPA2_WITH_EAP_MODE = WPA2_SEC_MODE * WPA_MULTIPLE;
var WPA_WPA2_WITH_EAP_MODE = WPA_WPA2_SEC_MODE * WPA_MULTIPLE;
var WEP_CIPHER_PLUS_SEC = 5;

function init() {
	wdk.init_form();
	for (var idx = 1; idx <= SSID_NUM; idx++) {
		var mgt = wdk.cdbVal('$wl_bss_key_mgt' + idx);
		var sec_mode = wdk.cdbVal('$wl_bss_sec_type' + idx);

		if (mgt == 1) // whether 8021x
		{
			if ((sec_mode & WPA_WPA2_SEC_MODE) == WPA_WPA2_SEC_MODE)
				sec_mode = WPA_WPA2_WITH_EAP_MODE;
			else
				sec_mode = (sec_mode & WPA_SEC_MODE) != 0 ? WPA_WITH_EAP_MODE : WPA2_WITH_EAP_MODE;
		}
		sec_view_disp(sec_mode, idx);
		showHide('ssid' + idx + 'Disp', Number(wdk.cdbVal('$wl_bss_enable' + idx)));
	}
}

function apply() {
	var i, f = document.frm;

	for (var idx = 1; idx <= SSID_NUM; idx++) {
		var wps_en = wdk.cdbVal('$wl_bss_sec_type' + idx) & WPS_SEC_MODE; //this satement position is carefully
		var sec_mode = wdk.getById('wl_wep_sec_type' + idx).value;

		/*wep*/
		if (sec_mode == WEP_CIPHER_PLUS_SEC) {
			var auth_mode = wdk.getById('wl_sec_wep_auth_mode' + idx).value;
			var obj_wep_key = new Object();
			obj_wep_key.k = new Array();
			obj_wep_key.num = 4;
			obj_wep_key.auth_len = f.elements['wl_wep_cipher' + idx].value;
			obj_wep_key.name = "wep";

			for (i = 1; i <= obj_wep_key.num; i++) {
				obj_wep_key.k[i] = wdk.getById('$wl_bss_wep_' + i + 'key' + idx);
			}
		}
		/*wpa wpa2*/
		else if (sec_mode == (WPA_SEC_MODE) || sec_mode == (WPA2_SEC_MODE) || sec_mode == (WPA_WPA2_SEC_MODE) || sec_mode == (WAPI_SEC_MODE)) //wpa/wpa2/wapi
		{
			var obj_pre_key = new Object();
			obj_pre_key.k = new Array();
			obj_pre_key.k[0] = wdk.getById('$wl_bss_wpa_psk' + idx);
			obj_pre_key.name = "wpa";
		}

		if (sec_mode == WEP_CIPHER_PLUS_SEC) //wep
		{
			if (wps_en) {
				if (!confirm(wdk.msg("Are you sure to change SSID" + idx + "'s Security Mode to WEP?\nWPS will be also invalidated!"))) {
					return;
				}
				wps_en = 0;
			}

			for (i = 1; i <= obj_wep_key.num; i++) {
				if ((wdk.getById('$wl_bss_wep_index' + idx).value == (i - 1)) && obj_wep_key.k[i].value == '') {
					alert(wdk.msg("SSID" + idx + " WEP Key" + i + " must input a value!"));
					wdk.getById('$wl_bss_wep_' + i + 'key' + idx).focus();
					return;
				}
				//	if (val_changed(obj_wep_key.k[i].value, wdk.cdbVal('$wl_bss_wep_'+i+'key'+idx)) || val_changed(obj_wep_key.auth_len,wdk.cdbVal('$wl_bss_cipher'+idx))) //cipher change or key change
				{
					if (!key_confirm(obj_wep_key, i, idx)) {
						return;
					}
					wdk.cdbSet('$wl_bss_wep_' + i + 'key' + idx, obj_wep_key.tx_val);
					/*wep*/ //alert("wep value: "+obj_wep_key.tx_val);
				}
			}
			wdk.cdbSet('$wl_bss_sec_type' + idx, (auth_mode == OPEN_SEC_MODE) ? (OPEN_SEC_MODE + WEP_SEC_MODE) : (SHARED_SEC_MODE + WEP_SEC_MODE));
			wdk.cdbSet('$wl_bss_cipher' + idx, wdk.getById('wl_wep_cipher' + idx).value);
			wdk.cdbSet('$wl_bss_key_mgt' + idx, '0'); //disable  802.1x.
		} else if (sec_mode == (WPA_SEC_MODE) || sec_mode == (WPA2_SEC_MODE) || sec_mode == (WPA_WPA2_SEC_MODE)) //wpa/wpa2
		{
			if (sec_mode == (WPA_SEC_MODE) && wps_en) {
				if (!confirm(wdk.msg("Are you sure to change SSID" + idx + "'s Security Mode to WPA-PSK?\nWPS will be also invalidated!"))) {
					return;
				}
				wps_en = 0;
			}
			//	if (val_changed(obj_pre_key.k[0], wdk.cdbVal('$wl_bss_wpa_psk'+idx)))
			{
				if (!key_confirm(obj_pre_key, 0, idx)) {
					return;
				}
				wdk.cdbSet('$wl_bss_wpa_psk' + idx, obj_pre_key.tx_val);
				/*wpa*/ //alert("wpa value: "+obj_pre_key.tx_val);
			}
			if (!chkNum(wdk.getById('$wl_bss_wpa_rekey' + idx), 0, 65535, "SSID" + idx + " Group Key Update Interval")) {
				wdk.getById('$wl_bss_wpa_rekey' + idx).focus();
				return;
			}
			wdk.cdbSet('$wl_bss_sec_type' + idx, Number(sec_mode) + Number(OPEN_SEC_MODE));
			wdk.cdbSet('$wl_bss_key_mgt' + idx, '0'); //disable  802.1x.
			wdk.cdbSet('$wl_bss_cipher' + idx, wdk.getById('wl_wpa_cipher' + idx).value);
			/*test*/ //alert("wpa sec mode: "+sec_mode);
		} else if (sec_mode == (WAPI_SEC_MODE)) //wapi
		{
			if (wps_en) {
				if (!confirm(wdk.msg("Are you sure to change SSID" + idx + "'s Security Mode to WAPI-PSK?\nWPS will be also invalidated!"))) {
					return;
				}
				wps_en = 0;
			}
			//	if (val_changed(obj_pre_key.k[0], wdk.cdbVal('$wl_bss_wpa_psk'+idx)))
			{
				if (!key_confirm(obj_pre_key, 0, idx)) {
					return;
				}
				wdk.cdbSet('$wl_bss_wpa_psk' + idx, obj_pre_key.tx_val);
				/*wapi*/ //alert("wapi value: "+obj_pre_key.tx_val);
			}
			if (!chkNum(wdk.getById('$wl_bss_wpa_rekey' + idx), 0, 65535, "SSID" + idx + " Group Key Update Interval")) {
				wdk.getById('$wl_bss_wpa_rekey' + idx).focus();
				return;
			}
			wdk.cdbSet('$wl_bss_sec_type' + idx, Number(sec_mode) + Number(OPEN_SEC_MODE));
			wdk.cdbSet('$wl_bss_key_mgt' + idx, '2'); //disable  802.1x.
			wdk.cdbSet('$wl_bss_cipher' + idx, wdk.getById('wl_wapi_cipher' + idx).value);
			/*test*/ //alert("wapi sec mode: "+sec_mode);
		} else if (sec_mode == (WPA_WITH_EAP_MODE) || sec_mode == (WPA2_WITH_EAP_MODE) || sec_mode == (WPA_WPA2_WITH_EAP_MODE)) {
			if (wps_en) {
				if (!confirm(wdk.msg("Are you sure to change SSID" + idx + "'s Security Mode to 802.1X?\nWPS will be also invalidated!"))) {
					return;
				}
				wps_en = 0;
			}
			if (!chkNum(wdk.getById('$wl_bss_wpa_rekey' + idx), 0, 65535, "SSID" + idx + " Group Key Update Interval")) {
				wdk.getById('$wl_bss_wpa_rekey' + idx).focus();
				return;
			}
			if (!chkIpOrDomain(wdk.getById('$wl_bss_radius_svr' + idx), "SSID" + idx + " Radius server IP Address/Domain Name")) {
				wdk.getById('$wl_bss_radius_svr' + idx).focus();
				return;
			}
			if (!chkNum(wdk.getById('$wl_bss_radius_svr_port' + idx), 1, 65535, "SSID" + idx + " Radius server Port")) {
				wdk.getById('$wl_bss_radius_svr_port' + idx).focus();
				return;
			}
			if (!chkStr(wdk.getById('$wl_bss_radius_svr_key' + idx), "SSID" + idx + " Radius server Shared Secret")) {
				wdk.getById('$wl_bss_radius_svr_key' + idx).focus();
				return;
			}

			wdk.cdbSet('$wl_bss_sec_type' + idx, (Number(sec_mode) / Number(WPA_MULTIPLE)) + Number(OPEN_SEC_MODE));
			wdk.cdbSet('$wl_bss_key_mgt' + idx, '1'); //enable 802.1x.
			wdk.cdbSet('$wl_bss_cipher' + idx, wdk.getById('wl_wpa_cipher' + idx).value);
		} else // disable
		{
			if (wps_en)
				if (!confirm(wdk.msg("Are you sure to change SSID" + idx + "'s Security Mode to Disable\nIt is not safe!"))) {
					return;
				}
			wdk.cdbSet('$wl_bss_sec_type' + idx, DISABLE_SEC_MODE);
			wdk.cdbSet('$wl_bss_cipher' + idx, NONE_CIPHER_MODE);
			wdk.cdbSet('$wl_bss_key_mgt' + idx, '0'); //disable  802.1x.
		}

		/*wps*/
		if (wps_en)
			wdk.cdbSet('$wl_bss_sec_type' + idx, Number(wdk.cdbVal('$wl_bss_sec_type' + idx)) | Number(WPS_SEC_MODE));

		/*	WPS 2.0 SPEC 12 p128
			AP must transition to the "Configured" state if any of the following occur:
			1. ...
			2. ...
			3. Manual configuration by user.
				modify any one of the following:
				1.the SSID
				2.the encryption algorithm
				3.the authentication algorithm
				4.any key or pass phrase
		*/
		wdk.cdbSet('$wl_bss_wps_state' + idx, 2);
	}
	wdk.save_form(2000);
}

function sec_view_disp(sec_mode, idx) {
	if (sec_mode == DISABLE_SEC_MODE) //disable
	{
		showHide('wl_wpa&2_disp' + idx, 0);
		showHide('wl_wep' + idx, 0);
		showHide('wl_option_title' + idx, 0)
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);
		wdk.getById('wl_wep_sec_type' + idx).value = DISABLE_SEC_MODE;
	} else if (sec_mode & (WEP_SEC_MODE)) //wep
	{
		showHide('wl_wpa&2_disp' + idx, 0);
		showHide('wl_wep' + idx, 1);
		showHide('wl_option_title' + idx, 1);
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);

		//for IE that 0 will display nothing because of <select>
		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (WEP40_CIPHER_MODE + WEP104_CIPHER_MODE))
			wdk.getById('wl_wep_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (WEP40_CIPHER_MODE + WEP104_CIPHER_MODE)
		else
			wdk.getById('wl_wep_cipher' + idx).value = WEP40_CIPHER_MODE;
		wdk.getById('wl_sec_wep_auth_mode' + idx).value = sec_mode & (OPEN_SEC_MODE + SHARED_SEC_MODE);
		wdk.getById('wl_option_title' + idx).innerHTML = 'Static WEP Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = WEP_CIPHER_PLUS_SEC;
	} else if ((sec_mode & (WPA_WPA2_SEC_MODE)) == WPA_WPA2_SEC_MODE) //wpa/wpa2
	{
		showHide('wl_wep' + idx, 0);
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 1);
		showHide('wl_option_title' + idx, 1);
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = 'WPA/WPA2 Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA_WPA2_SEC_MODE);
	} else if (sec_mode & (WPA_SEC_MODE)) //wpa
	{
		showHide('wl_wep' + idx, 0);
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 1);
		showHide('wl_option_title' + idx, 1);
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = 'WPA Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA_SEC_MODE);
	} else if (sec_mode & (WPA2_SEC_MODE)) //wpa2
	{
		showHide('wl_wep' + idx, 0);
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 1);
		showHide('wl_option_title' + idx, 1);;
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = 'WPA2 Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA2_SEC_MODE);
	} else if (sec_mode & (WAPI_SEC_MODE)) //wapi
	{
		showHide('wl_wep' + idx, 0);
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wapi_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_psk_disp' + idx, 1);
		showHide('wl_option_title' + idx, 1);;
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);

		wdk.getById('wl_wapi_cipher' + idx).value = WAPI_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = 'WAPI Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WAPI_SEC_MODE);
	} else if ((sec_mode & WPA_WPA2_WITH_EAP_MODE) == WPA_WPA2_WITH_EAP_MODE) //wpa/wpa2 with eap
	{
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wep' + idx, 0);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 0);
		showHide('wl_option_title' + idx, 1)
		showHide('wl_wpa&2WithEAP_disp' + idx, 1);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = '802.1X Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA_WPA2_WITH_EAP_MODE);
	} else if (sec_mode & WPA_WITH_EAP_MODE) //wpa with eap
	{
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wep' + idx, 0);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 0);
		showHide('wl_option_title' + idx, 1)
		showHide('wl_wpa&2WithEAP_disp' + idx, 1);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = '802.1X Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA_WITH_EAP_MODE);
	} else if (sec_mode & WPA2_WITH_EAP_MODE) //wpa2 with eap
	{
		showHide('wl_wpa&2_disp' + idx, 1);
		showHide('wl_wep' + idx, 0);
		showHide('wl_wapi_cipher_disp' + idx, 0);
		showHide('wl_wpa&2_cipher_disp' + idx, 1);
		showHide('wl_wpa&2_psk_disp' + idx, 0);
		showHide('wl_option_title' + idx, 1)
		showHide('wl_wpa&2WithEAP_disp' + idx, 1);

		if (Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE))
			wdk.getById('wl_wpa_cipher' + idx).value = Number(wdk.cdbVal('$wl_bss_cipher' + idx)) & (AES_CIPHER_MODE + TKIP_CIPHER_MODE); //TKIP or AES
		else
			wdk.getById('wl_wpa_cipher' + idx).value = TKIP_CIPHER_MODE;
		wdk.getById('wl_option_title' + idx).innerHTML = '802.1X Settings';
		wdk.getById('wl_wep_sec_type' + idx).value = (WPA2_WITH_EAP_MODE);
	} else {
		showHide('wl_wpa&2_disp' + idx, 0);
		showHide('wl_wep' + idx, 0);
		showHide('wl_option_title' + idx, 0)
		showHide('wl_wpa&2WithEAP_disp' + idx, 0);
		wdk.getById('wl_wep_sec_type' + idx).value = DISABLE_SEC_MODE;
	}
}

function key_confirm(key, idx, ssid) {
	var rc = 0;
	var str_len = key.k[idx].value.length;
	var key_len = key.auth_len;
	if (key.name == "wep") {
		var auth_len_idx = wdk.getById('$wl_bss_wep_index' + ssid).value;

		if ((idx - 1 != auth_len_idx) && (!key.k[idx].value)) { //non selected WEP key allow empty string
			rc = 1;
		} else if ((str_len == 5 && key_len == OPEN_SEC_MODE) |
			(str_len == 13 && key_len == SHARED_SEC_MODE)) {
			if (chkStr(key.k[idx], 'WEP Key' + idx))
				rc = 1;
		} else if ((str_len == 10 && key_len == OPEN_SEC_MODE) |
			(str_len == 26 && key_len == SHARED_SEC_MODE)) {
			if (chkHex(key.k[idx], 'WEP Key' + idx))
				rc = 1;
		}
		if (rc) {
			key.tx_val = key.k[idx].value;
		} else {
			key.k[idx].focus();
			if (key_len == OPEN_SEC_MODE)
				alert('SSID' + ssid + ' WEP Key' + idx + ' is Invalid!' + ' It should be 5 ASCII characters or 10 hex digits.');
			else
				alert('SSID' + ssid + ' WEP Key' + idx + ' is Invalid!' + ' It should be 13 ASCII characters or 26 hex digits.');
		}
		return rc;
	} else if (key.name == "wpa") {
		if (!chkPreKey(key.k[idx], "SSID" + ssid + " Pre-shared Key")) {
			key.k[idx].focus();
			return 0;
		}
		key.tx_val = key.k[idx].value;
	}
	return 1;
}
 </SCRIPT>

 <link rel=stylesheet type=text/css href=demo2.css>
</HEAD>

<body class=gui onload=init() onkeydown="(event.keyCode==13) ? 0 : 1">
 <script>
header()
 </script>
 <form name=frm>
  <script>
for (var i = 1; i <= SSID_NUM; i++) {
	var s = '';
	s += '<div id=ssid' + i + 'Disp>';
	s += '<fieldset>';
	s += '<legend>' + 'SSID' + i + '&nbsp;' + wdk.msg("Settings") + '<' + '/legend>';
	s += '<div class=setting>';
	s += '	<div class=label>' + wdk.msg("Security Mode") + '<' + '/div>';
	s += '	<select name=wl_s_sm' + i + ' id=wl_wep_sec_type' + i + ' SIZE=1 onchange=sec_view_disp(this.value,' + i + ')>';
	//createSelectTagChild(0,keyLists.length,"","diffvalue",keyLists,valLists);
	s += '<option value=0>' + wdk.msg("Disable") + '<' + '/option>';
	s += '<option value=5>WEP<' + '/option>';
	// s += '<option value=8>WPA - PSK<'+'/option>';
	s += '<option value=16>WPA2 - PSK<' + '/option>';
	s += '<option value=24>WPA/WPA2 - PSK<' + '/option>';
	// s += '<option value=128>WAPI - PSK<' + '/option>';
	s += '	<' + '/select>';
	s += '<' + '/div>';
	s += '<h2 id=wl_option_title' + i + '><' + '/h2>';
	s += '<div id=wl_wep' + i + ' style="display:none;">';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Authentication Mode") + '<' + '/div>';
	s += '		<select name=wl_s_wep_auth_m id=wl_sec_wep_auth_mode' + i + ' SIZE=1>';
	s += '			<option value=1>' + wdk.msg("Open System") + '<' + '/option>';
	s += '			<option value=2>' + wdk.msg("Shared System") + '<' + '/option>';
	s += '		<' + '/select>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Authentication Length") + '<' + '/div>';
	s += '		<select name=wl_s_wep_l id=wl_wep_cipher' + i + ' SIZE=1>';
	s += '			<option value=1>' + wdk.msg("64 Bit") + '<' + '/option>';
	s += '			<option value=2>' + wdk.msg("128 Bit") + '<' + '/option>';
	s += '		<' + '/select>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("WEP Key Selection") + '<' + '/div>';
	s += '		<select name=wl_s_wep_k_idx id=$wl_bss_wep_index' + i + ' SIZE=1>';
	s += '			<option value=0>' + wdk.msg("Key 1") + '<' + '/option>';
	s += '			<option value=1>' + wdk.msg("Key 2") + '<' + '/option>';
	s += '			<option value=2>' + wdk.msg("Key 3") + '<' + '/option>';
	s += '			<option value=3>' + wdk.msg("Key 4") + '<' + '/option>';
	s += '		<' + '/select>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("WEP Key1") + '<' + '/div>';
	s += '		<input name=wl_s_wep_key1 id=$wl_bss_wep_1key' + i + ' size=26>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("WEP Key2") + '<' + '/div>';
	s += '		<input name=wl_s_wep_key2 id=$wl_bss_wep_2key' + i + ' size=26>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("WEP Key3") + '<' + '/div>';
	s += '		<input name=wl_s_wep_key3 id=$wl_bss_wep_3key' + i + ' size=26>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("WEP Key4") + '<' + '/div>';
	s += '		<input name=wl_s_wep_key4 id=$wl_bss_wep_4key' + i + ' size=26>';
	s += '	<' + '/div>';
	s += '<' + '/div>';
	s += '<div id=wl_wpa&2_disp' + i + ' style="display:none;">';
	s += '	<div class=setting id=wl_wapi_cipher_disp' + i + ' style="display:none;">';
	s += '		<div class=label>' + wdk.msg("Cipher Mode") + '<' + '/div>';
	s += '		<select name=wl_s_wapi_ms id=wl_wapi_cipher' + i + ' SIZE=1 disabled=true>';
	s += '			<option value=16>' + wdk.msg("SMS4") + '<' + '/option>';
	s += '		<' + '/select>';
	s += '	<' + '/div>';
	s += '	<div class=setting id=wl_wpa&2_cipher_disp' + i + ' style="display:none;">';
	s += '		<div class=label>' + wdk.msg("Cipher Mode") + '<' + '/div>';
	s += '		<select name=wl_s_wpa_ms id=wl_wpa_cipher' + i + ' SIZE=1>';
	s += '			<option value=4>TKIP<' + '/option>';
	s += '			<option value=8>AES<' + '/option>';
	s += '			<option value=12>TKIP&AES<' + '/option>';
	s += '		<' + '/select>';
	s += '	<' + '/div>';
	s += '	<div class=setting id=wl_wpa&2_psk_disp' + i + ' style="display:none;">';
	s += '		<div class=label>' + wdk.msg("Pre-shared Key") + '<' + '/div>';
	s += '		<input name=wl_s_wpa_k id=$wl_bss_wpa_psk' + i + ' size=34 maxlength=63>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Group Key Update Interval") + ' (0-65535)<' + '/div>';
	s += '		<input name=wl_s_gkui' + i + ' id=$wl_bss_wpa_rekey' + i + ' size=5 maxlength=5> seconds';
	s += '	<' + '/div>';
	s += '<' + '/div>';
	s += '<div id=wl_wpa&2WithEAP_disp' + i + ' style="display:none">';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Radius server IP Address/Domain Name") + '<' + '/div>';
	s += '		<input name=$wl_bss_radius_svr' + i + ' id=$wl_bss_radius_svr' + i + ' size=26 maxlength=63>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Radius server Port") + '<' + '/div>';
	s += '		<input name=$wl_bss_radius_svr_port' + i + ' id=$wl_bss_radius_svr_port' + i + ' size=5 maxlength=5>';
	s += '	<' + '/div>';
	s += '	<div class=setting>';
	s += '		<div class=label>' + wdk.msg("Radius server Shared Secret") + '<' + '/div>';
	s += '		<input name=$wl_bss_radius_svr_key' + i + ' id=$wl_bss_radius_svr_key' + i + ' size=26 maxlength=64>';
	s += '	<' + '/div>';
	s += '<' + '/div>';
	s += '<' + '/fieldset>';
	s += '<' + '/div>';
	if (i < SSID_NUM)
		s += '<br>';
	puts(s);
}
footer();
  </script>
 </form>

</html>
